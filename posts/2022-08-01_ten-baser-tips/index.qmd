---
title: "Ten `base-r` functions you might not know"
date: "2022-08-01"
categories: [code, r, base-r, tips]
image: "image.jpg"
draft: true
---

In this short post, we will go through 10 base r functions that you may have been underutilized.

1.  `lengths` - This function returns the lengths of objects in a list, making it useful for quickly summarizing the structure of a data set.

```{r}
# create a list of vectors
my_list = list(c(1, 2, 3), c("a", "b", "c"), c(TRUE, TRUE, FALSE))

# calculate the lengths of each vector in the list
lengths(my_list)
```

2.  `rle` - This function computes the lengths and values of runs of equal values in a vector, making it useful for identifying patterns in data.

```{r}
# create a vector with repeated values
my_vector = c(1, 1, 1, 2, 2, 3, 3, 3, 3)

# calculate the lengths and values of runs of equal values in the vector
rle(my_vector)
```

3.  `ave` - This function calculates the mean of a vector, with the option to specify grouping variables for calculating means by group.

```{r}
# create a data frame with two variables
my_data = data.frame(
  x = c(1, 2, 3, 4, 5),
  y = c("a", "b", "c", "d", "e")
)

# calculate the mean of variable "x"
ave(my_data$x)

# calculate the mean of variable "x" by the levels of variable "y"
ave(my_data$x, my_data$y)
```

4.  `file_path_sans_ext` and `file_ext` - These functions allow for the manipulation of file paths, with "file_path_sans_ext" returning the file path without the extension and "file_ext" returning the file extension. "baseenv" allows for the creation of a new environment, which can be useful for managing variable scope.

```{r}
# create a file path
my_file = "~/data/my_file.txt"

# extract the file path without the extension
tools::file_path_sans_ext(my_file)

# extract the file extension
tools::file_ext(my_file)
```

6.  `sprintf` - This function allows for the creation of formatted strings, making it useful for creating consistent output in reports or visualizations.

```{r}
# create a string with placeholders for variables
my_string = "The value of x is %d and the value of y is %f"

# insert values into the placeholders
sprintf(my_string, 1, 2.5)
```

7.  `sweep` - This function allows you to apply a function to a matrix or vector by a margin, making it useful for quickly performing calculations across rows or columns.

```{r}
# create a matrix
my_matrix = matrix(1:9, nrow = 3)

# apply the sum function across the rows of the matrix
sweep(my_matrix, 1, colSums(my_matrix), "+")
```

8.  `Map` - This function applies a function to each element of a list, returning a list of results.

```{r}
# create a list of vectors
my_list = list(r=rnorm(10), y=runif(10))

# apply the sum function to each vector in the list
Map(sum, my_list)
```

9.  `replace` - This function allows for the replacement of values in a vector or data frame, making it useful for data cleaning and manipulation.

```{r}
# create a vector with some missing values
my_vector = c(1, NA, 2, NA, 3)

# replace the missing values with 0
replace(my_vector, is.na(my_vector), 0)
```

10. `within` - This function allows for the evaluation of an expression within a specified environment, making it useful for controlling variable scope and accessing objects in different environments.

```{r}
# create a data frame
my_data = data.frame(
  x = c(1, 2, 3, 4),
  y = c("a", "b", "c", "d")
)

within(my_data, mean(x))
```

11. `strrep` is used to repeat a string a specified number of times. Here is an example of how to use it:

```{r}
# Repeat the string "hello" 5 times
strrep("hello", 5)
```

This function can be useful for creating strings of repeated characters or words, or for padding strings with a certain character or word. It can also be useful for creating strings of a certain length by repeating a given string until it reaches the desired length.

```{r}
# Pad the string "hello" with underscores until it is 10 characters long
padded_string = paste("hello", strrep("_", 10 - nchar("hello")))
```
